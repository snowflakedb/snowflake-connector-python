name: Build and Test

on:
    push:
        branches:
            - master
            - mkeller-SNOW-155318-migration
        tags:
            - v*
    pull_request:
        branches:
            - master
            - prep-**

jobs:
  lint:
    name: Check linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python -c "import sys; import os; print(\"\n\".join(os.environ[\"PATH\"].split(os.pathsep))); print(sys.version); print(sys.executable);"
      - name: Upgrade setuptools, pip and wheel
        run: python -m pip install -U setuptools pip wheel
      - name: Install tox
        run: python -m pip install tox
      - name: Run fix_lint
        run: tox -e fix_lint

  build-manylinux:
    needs: lint
    name: Build linux-py${{ matrix.python-version }}
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux1_x86_64
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v1
      - name: Updating path
        run: |
          echo "::add-path::/opt/python/cp35-cp35m/bin/"
          echo "::add-path::/opt/python/cp36-cp36m/bin/"
          echo "::add-path::/opt/python/cp37-cp37m/bin/"
          echo "::add-path::/opt/python/cp38-cp38/bin/"
      - name: Display Python version
        run: python${{ matrix.python-version }} -c "import sys; print(sys.version)"
      - name: Upgrade setuptools and pip
        run: python${{ matrix.python-version }} -m pip install -U setuptools pip
      - name: Generate wheel
        run: python${{ matrix.python-version }} -m pip wheel -v -w dist_tmp --no-deps .
      - name: Run auditwheel
        run: auditwheel repair --plat manylinux2010_x86_64 -L connector dist_tmp/snowflake_connector_python*.whl -w dist
      - name: Show wheels generated
        run: ls -lh dist
      - uses: actions/upload-artifact@v1
        with:
          name: linux_py${{ matrix.python-version }}
          path: dist/

  build-macos:
    needs: lint
    name: Build macos-py${{ matrix.python-version }}
    runs-on: macos-latest
    env:
      python: '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3'
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Download Python 3.8
        run: |
          curl "https://www.python.org/ftp/python/3.8.2/python-3.8.2-macosx10.9.pkg" -o python38.pkg
          sudo installer -pkg python38.pkg -target /
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Upgrade setuptools and pip
        run: python -m pip install -U setuptools pip auditwheel
      - name: Generate wheel
        run: |
          $python -m pip install -r build_reqs.txt
          if [[ "$PYTHON_VERSION" =~ ^3\.([0-9])* ]]; then
            $python setup.py bdist_wheel -d dist/ --py-limited-api=cp3${BASH_REMATCH[1]}
          else
            exit 1
          fi
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.12
          CFLAGS: -mmacosx-version-min=10.12
          PYTHON_VERSION: ${{ matrix.python-version }}
      - name: Show wheels generated
        run: ls -lh dist/
      - uses: actions/upload-artifact@v2
        with:
          name: macos_py${{ matrix.python-version }}
          path: dist/

  build-windows:
    needs: lint
    name: Build windows-py${{ matrix.python-version }}
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7]
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@master
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Upgrade setuptools and pip
        run: python -m pip install -U setuptools pip wheel
      - name: Generate wheel
        run: python -m pip wheel -v -w dist --no-deps .
      - name: Show wheels generated
        run: ls -lh dist
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: windows_py${{ matrix.python-version }}
          path: dist/

  test:
    name: Test ${{ matrix.os.download_name }}-${{ matrix.python-version }}-${{ matrix.cloud-provider }}
    needs: [build-manylinux, build-macos, build-windows]
    runs-on: ${{ matrix.os.image_name }}
    strategy:
      matrix:
        os:
         - image_name: ubuntu-latest
           download_name: linux
#         - image_name: macos-latest
#           download_name: macos
         - image_name: windows-latest
           download_name: windows
        python-version: [3.5, 3.6, 3.7, 3.8]
        cloud-provider: [aws]
#        cloud-provider: [aws, azure, gcp]
        exclude:
          - python-version: 3.8
            os:
              download_name: windows
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Setup parameters file
        shell: bash
        env:
          PARAMETERS_SECRET: ${{ secrets.PARAMETERS_SECRET }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PARAMETERS_SECRET" \
          .github/workflows/parameters_${{ matrix.cloud-provider }}.json.gpg | python -c \
          "import json;i=json.loads(open(0).read());i={k.rsplit('_', 1)[1].lower(): v for k,v in i['testconnection'].items()};print('CONNECTION_PARAMETERS='+str(i))" > test/parameters.py
      - name: Download wheel(s)
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os.download_name }}_py${{ matrix.python-version }}
          path: dist
      - name: Show wheels downloaded
        run: ls -lh dist
        shell: bash
      - name: Remove manylinux1 wheel
        run: |
          rm dist/*manylinux1*.whl
          ls -lh dist
        if: matrix.os.download_name == 'linux'
      - name: Upgrade setuptools, pip and wheel
        run: python -m pip install -U setuptools pip wheel
      - name: Install tox
        run: python -m pip install tox tox-external-wheels
      - name: Run tests
        run: tox -e "py${PYTHON_VERSION/\./}{,-pandas,-sso}-ci"
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        shell: bash
